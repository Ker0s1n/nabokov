from database.db import create_connection
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes


async def find_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ö–µ—à—Ç–µ–≥—É."""
    hashtag = context.args[0].lower() if context.args else None
    if not hashtag or "#" not in hashtag:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–µ—à—Ç–µ–≥. –ù–∞–ø—Ä–∏–º–µ—Ä: /find #example"
        )
        return

    conn = create_connection("bot.db")
    cur = conn.cursor()
    cur.execute(
        """
        SELECT messages.text, users.full_name
        FROM messages
        JOIN users ON messages.user_id = users.user_id
        WHERE messages.text LIKE ?
        """,
        (f"%{hashtag}%",),
    )
    messages = cur.fetchall()

    if messages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        response = "\n\n".join(
            [f"üë§ {author}:\n{text}" for text, author in messages]
        )
        await update.message.reply_text(response)
    else:
        await update.message.reply_text(
            f"–°–æ–æ–±—â–µ–Ω–∏–π —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–π –∏ –∏—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:"
    )
    commands = [["/start", "/find #info"],]
    reply_markup = ReplyKeyboardMarkup(commands, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
